":"; exec mzscheme -r $0 "$@"


(define (run cmd)
    (display cmd)
    (newline)
    (display "=>")
    (display (eval cmd))
    (newline)
    (newline)
  )

(define (print argv)
  (display argv)
  (newline)
  (newline)
)

(print "1.1.1")

(run '468)

(run '(+ 137 249))

(run '(* 5 99))

(run '(/ 10 5))

(run '(+ 2.7 10))

(run '(+ 21 35 12 7))


(run '(* 25 4 12))

(run '(+ (* 3 5) (- 10 6)))


(run '(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6)))


(run '(+ (* 3 
            (+ (* 2 4) 
               (+ 3 5))) 
         (+ (- 10 7) 
            6)))

(print "1.1.2")

(run '(define size 2))

(run 'size)

(run '(* 5 size))

(run '(define pi 3.14159))


(run '(define radius 10))

(run '(* pi (* radius radius)))

(run '(define circumference (* 2 pi radius)))

(run 'circumference)


(print "1.1.3")

(run '(* (+ 2 (* 4 6))
         (+ 3 5 7)
         ))


(print "1.1.4")

(run '(define (square x) (* x x)))

(run '(square 21))

(run '(square (+ 2 5)))

(run '(square (square 3)))

(run '(define (sum-of-squares x y)
        (+ (square x) (square y))))


(run '(sum-of-squares 3 4))



(run '(define (f a)
        (sum-of-squares (+ a 1) (* a 2))
        ))

(run '(f 5))

(print "1.1.5")


(print "代换模型")

(print "正则序 与 应用序")



(print "1.1.6")

(run '(define (abs x)
        (cond ((> x 0) x)
              ((= x 0) 0)
              ((< x 0) (-x))
              )
        ))



(run '(define (abs x)
  (cond ((< x 0) (- x))
        (else x)
        )
  ))


(run '(define (abs x)
        (if (< x 0)
          (- x)
          x
          )
        ))



(run '(define (>= x y)
        (or (x > x y) (= x y))
        ))

(run '(define (>= x y)
        (not (< x y))
        ))



(print "1.1.7")

(run '(define (good-enough? guess x)
        (< (abs (- (square guess) x)) 0.001)
        )
     )

(run '(define (average x y)
        (/ (+ x y) 2)
        ))

(run '(define (improve guess x)
        (average guess (/ x guess))
        )
     )

(run '(define (sqrt-iter guess x)
        (if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x)
                     x)
          )
        ))

(run '(define (sqrt x)
        (sqrt-iter 1.0 x)
        )
     )

(run '(sqrt 9))

(run '(sqrt (+ 100 37)))

(run '(+ (sqrt 2) (sqrt 3)))

(run '(square (sqrt 1000)))


(print "1.1.8")

(run '(define (square x) (* x x)))

(run '(define (double x) (+ x x)))

(run '(define (square x) (exp (double (log x)))))

(run '(define (square x) (* x x)))

(run '(define (good-enough? guess x) (< (abs (- (square guess) x)) 0.001)))


(run '(define (sqrt x) (sqrt-iter 1.0 x)))

(run '(define (sqrt-iter guess x) 
        (if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)
          )))

(run '(define (good-enough? guess x)
        (< (abs (- (square guess) x)) 0.001)
        ))

(run '(define (improve guess x)
        (average guess (/ x guess))
        ))

(run '(sqrt 9))

(run '(define (sqrt x)
        (define (good-enough? guess x)
          (< (abs (- (square guess) x)) 0.001)
          )
        (define (improve guess x)
          (average guess (/ x guess))
          )
        (define (sqrt-iter guess x)
          (if (good-enough? guess x)
            guess
            (sqrt-iter (improve guess x) x)
            )
          )
        (sqrt-iter 1.0 x)
        )
     )


(run '(sqrt 9))

(run '(define (sqrt x)
        (define (good-enough? guess)
          (< (abs (- (square guess) x)) 0.001)
          )
        (define (improve guess)
          (average guess (/ x guess))
          )
        (define (sqrt-iter guess)
          (if (good-enough? guess)
            guess
            (sqrt-iter (improve guess))
            )
          )
        (sqrt-iter 1.0)
        )
     )

(run '(sqrt 9))

